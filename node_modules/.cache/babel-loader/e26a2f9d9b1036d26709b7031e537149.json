{"ast":null,"code":"import axios from 'axios';\nimport { rideAdd } from '../redux/reducers/RideSlice';\n\nconst ApiRides = (userState, dispatch, dataCheck) => {\n  let ridesIds = [];\n  let ridesIdsFilter = [];\n  let ridesIdsFilterSort = [];\n  axios.get('https://assessment.api.vweb.app/rides').then(res => {\n    let response = res.data;\n    let userStation = userState.station_code;\n    let ridesNear = response.map((el, indx) => {\n      ridesIds[indx] = el.station_path.map(el_ => {\n        let value = el_ - userStation > 0 ? el_ - userStation : userStation - el_;\n        return value;\n      });\n      let ridesIdValue = Math.min(...ridesIds[indx]);\n      return {\n        ridesIdValue,\n        rideData: el\n      };\n    });\n    console.log(userStation);\n    console.log(ridesNear);\n    ridesIdsFilter = Array.from(ridesNear.reduce((map, obj) => map.set(obj.ridesIdValue, obj), new Map()).values());\n    console.log(ridesIdsFilter);\n    ridesIdsFilterSort = ridesIdsFilter.sort((a, b) => {\n      if (a.ridesIdValue > b.ridesIdValue) {\n        return 1;\n      }\n\n      if (a.ridesIdValue < b.ridesIdValue) {\n        return -1;\n      }\n\n      return 0;\n    });\n    let ridesFilter = ridesIdsFilterSort.map(el => el.rideData);\n\n    if (dataCheck !== 0) {\n      return dispatch(rideAdd({\n        rides_data: ridesFilter\n      }));\n    }\n  });\n};\n\n_c = ApiRides;\nexport default ApiRides;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiRides\");","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/apis/ApiRides.jsx"],"names":["axios","rideAdd","ApiRides","userState","dispatch","dataCheck","ridesIds","ridesIdsFilter","ridesIdsFilterSort","get","then","res","response","data","userStation","station_code","ridesNear","map","el","indx","station_path","el_","value","ridesIdValue","Math","min","rideData","console","log","Array","from","reduce","obj","set","Map","values","sort","a","b","ridesFilter","rides_data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAWC,QAAX,EAAoBC,SAApB,KAAkC;AAE/C,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,kBAAkB,GAAG,EAAzB;AAEAR,EAAAA,KAAK,CAACS,GAAN,CAAU,uCAAV,EAAmDC,IAAnD,CAEIC,GAAG,IAAI;AACC,QAAIC,QAAQ,GAAGD,GAAG,CAACE,IAAnB;AACA,QAAIC,WAAW,GAAGX,SAAS,CAACY,YAA5B;AACA,QAAIC,SAAS,GAAGJ,QAAQ,CAACK,GAAT,CAAc,CAACC,EAAD,EAAIC,IAAJ,KAAa;AACvCb,MAAAA,QAAQ,CAACa,IAAD,CAAR,GAAiBD,EAAE,CAACE,YAAH,CAAgBH,GAAhB,CAAqBI,GAAG,IAAI;AACzC,YAAIC,KAAK,GAAGD,GAAG,GAAGP,WAAN,GAAoB,CAApB,GAAwBO,GAAG,GAAGP,WAA9B,GAA6CA,WAAW,GAAGO,GAAvE;AACA,eAAOC,KAAP;AACH,OAHgB,CAAjB;AAIA,UAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGnB,QAAQ,CAACa,IAAD,CAApB,CAAnB;AACA,aAAO;AAAEI,QAAAA,YAAF;AAAgBG,QAAAA,QAAQ,EAACR;AAAzB,OAAP;AACH,KAPe,CAAhB;AAQAS,IAAAA,OAAO,CAACC,GAAR,CAAYd,WAAZ;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAZ;AACAT,IAAAA,cAAc,GAAGsB,KAAK,CAACC,IAAN,CAAWd,SAAS,CAACe,MAAV,CAAkB,CAACd,GAAD,EAAMe,GAAN,KAAcf,GAAG,CAACgB,GAAJ,CAAQD,GAAG,CAACT,YAAZ,EAAyBS,GAAzB,CAAhC,EAAgE,IAAIE,GAAJ,EAAhE,EAA4EC,MAA5E,EAAX,CAAjB;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYrB,cAAZ;AACAC,IAAAA,kBAAkB,GAAGD,cAAc,CAAC6B,IAAf,CAAqB,CAACC,CAAD,EAAGC,CAAH,KAAS;AAC/C,UAAGD,CAAC,CAACd,YAAF,GAAiBe,CAAC,CAACf,YAAtB,EAAmC;AAC/B,eAAO,CAAP;AACH;;AAAA,UAAGc,CAAC,CAACd,YAAF,GAAiBe,CAAC,CAACf,YAAtB,EAAmC;AAChC,eAAO,CAAC,CAAR;AACH;;AAAA,aAAO,CAAP;AACJ,KANoB,CAArB;AAOA,QAAIgB,WAAW,GAAG/B,kBAAkB,CAACS,GAAnB,CAAwBC,EAAE,IAAIA,EAAE,CAACQ,QAAjC,CAAlB;;AACA,QAAIrB,SAAS,KAAK,CAAlB,EAAqB;AACjB,aAAOD,QAAQ,CAAEH,OAAO,CAAE;AAACuC,QAAAA,UAAU,EAACD;AAAZ,OAAF,CAAT,CAAf;AACH;AACJ,GA5BT;AAgCH,CAtCD;;KAAMrC,Q;AAwCN,eAAeA,QAAf","sourcesContent":["import axios from 'axios';\r\nimport { rideAdd } from '../redux/reducers/RideSlice';\r\n\r\nconst ApiRides = (userState,dispatch,dataCheck) => {\r\n\r\n    let ridesIds = [];\r\n    let ridesIdsFilter = [];\r\n    let ridesIdsFilterSort = [];\r\n\r\n    axios.get('https://assessment.api.vweb.app/rides').then(\r\n\r\n        res => {\r\n                let response = res.data;\r\n                let userStation = userState.station_code;\r\n                let ridesNear = response.map( (el,indx) => {\r\n                    ridesIds[indx] = el.station_path.map( el_ => {\r\n                        let value = el_ - userStation > 0 ? el_ - userStation :  userStation - el_\r\n                        return value\r\n                    } )\r\n                    let ridesIdValue = Math.min(...ridesIds[indx]);\r\n                    return { ridesIdValue, rideData:el }\r\n                } )\r\n                console.log(userStation)\r\n                console.log(ridesNear)\r\n                ridesIdsFilter = Array.from(ridesNear.reduce( (map, obj) => map.set(obj.ridesIdValue,obj) , new Map() ).values())\r\n                console.log(ridesIdsFilter)\r\n                ridesIdsFilterSort = ridesIdsFilter.sort( (a,b) => {\r\n                    if(a.ridesIdValue > b.ridesIdValue){\r\n                        return 1;\r\n                    }if(a.ridesIdValue < b.ridesIdValue){\r\n                        return -1;\r\n                    }return 0;\r\n                })\r\n                let ridesFilter = ridesIdsFilterSort.map( el => el.rideData )\r\n                if( dataCheck !== 0 ){\r\n                    return dispatch( rideAdd( {rides_data:ridesFilter} ) )\r\n                }\r\n            }\r\n\r\n    )\r\n    \r\n} \r\n\r\nexport default ApiRides;\r\n"]},"metadata":{},"sourceType":"module"}