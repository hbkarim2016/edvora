{"ast":null,"code":"import axios from 'axios';\nimport { originalRidesAddNearest, originalRidesAddPast, originalRidesAddUpcoming } from '../redux/reducers/OriginalRidesSlice';\nimport { rideAdd } from '../redux/reducers/RideSlice';\n\nconst ApiRides = (userState, dispatch, dataCheck) => {\n  let ridesIds = [];\n  let ridesIdsFilter = [];\n  let ridesIdsFilterSort = [];\n  axios.get('https://assessment.api.vweb.app/rides').then(res => {\n    let response = res.data;\n    let userStation = userState.station_code;\n    let ridesNear = response.map((el, indx) => {\n      ridesIds[indx] = el.station_path.map(el_ => {\n        let value = el_ - userStation > 0 ? el_ - userStation : userStation - el_;\n        return value;\n      });\n      let ridesIdValue = Math.min(...ridesIds[indx]);\n      return {\n        ridesIdValue,\n        rideData: el\n      };\n    });\n    console.log(userStation);\n    ridesIdsFilter = Array.from(ridesNear.reduce((map, obj) => map.set(obj.ridesIdValue, obj), new Map()).values());\n    console.log(ridesIdsFilter);\n    ridesIdsFilterSort = ridesIdsFilter.sort((a, b) => {\n      if (a.ridesIdValue > b.ridesIdValue) {\n        return 1;\n      }\n\n      if (a.ridesIdValue < b.ridesIdValue) {\n        return -1;\n      }\n\n      return 0;\n    });\n    /* NEAREST DATA */\n\n    let ridesFilter = ridesIdsFilterSort.map(el => el.rideData);\n    /* GET TIME NOW */\n\n    const timeNow = new Date();\n    let timeNow_ = timeNow.getTime();\n    /* UPCOMING */\n\n    let originalUpcoming = ridesFilter.filter(el => new Date(el.date).getTime() > timeNow_);\n    /* PAST */\n\n    let originalPast = ridesFilter.filter(el => new Date(el.date).getTime() < timeNow_);\n    /* DISPATCH DATA TO ORIGINAL STORE */\n\n    if (dataCheck !== 0) {\n      dispatch(rideAdd({\n        rides_data: ridesFilter,\n        upcomingCount: originalUpcoming.length,\n        pastCount: originalPast.length\n      }));\n      dispatch(originalRidesAddNearest({\n        originalRidesNearest: ridesFilter\n      }));\n      dispatch(originalRidesAddUpcoming({\n        originalRidesUpcoming: originalUpcoming\n      }));\n      dispatch(originalRidesAddPast({\n        originalRidesPast: originalPast\n      }));\n    }\n  });\n};\n\n_c = ApiRides;\nexport default ApiRides;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiRides\");","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/apis/ApiRides.jsx"],"names":["axios","originalRidesAddNearest","originalRidesAddPast","originalRidesAddUpcoming","rideAdd","ApiRides","userState","dispatch","dataCheck","ridesIds","ridesIdsFilter","ridesIdsFilterSort","get","then","res","response","data","userStation","station_code","ridesNear","map","el","indx","station_path","el_","value","ridesIdValue","Math","min","rideData","console","log","Array","from","reduce","obj","set","Map","values","sort","a","b","ridesFilter","timeNow","Date","timeNow_","getTime","originalUpcoming","filter","date","originalPast","rides_data","upcomingCount","length","pastCount","originalRidesNearest","originalRidesUpcoming","originalRidesPast"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { originalRidesAddNearest, originalRidesAddPast, originalRidesAddUpcoming } from '../redux/reducers/OriginalRidesSlice';\r\nimport { rideAdd } from '../redux/reducers/RideSlice';\r\n\r\nconst ApiRides = (userState,dispatch,dataCheck) => {\r\n\r\n    let ridesIds = [];\r\n    let ridesIdsFilter = [];\r\n    let ridesIdsFilterSort = [];\r\n\r\n    axios.get('https://assessment.api.vweb.app/rides').then(\r\n\r\n        res => {\r\n                let response = res.data;\r\n                let userStation = userState.station_code;\r\n                let ridesNear = response.map( (el,indx) => {\r\n                    ridesIds[indx] = el.station_path.map( el_ => {\r\n                        let value = el_ - userStation > 0 ? el_ - userStation :  userStation - el_\r\n                        return value\r\n                    } )\r\n                    let ridesIdValue = Math.min(...ridesIds[indx]);\r\n                    return { ridesIdValue, rideData:el }\r\n                } )\r\n                console.log(userStation)\r\n                ridesIdsFilter = Array.from(ridesNear.reduce( (map, obj) => map.set(obj.ridesIdValue,obj) , new Map() ).values())\r\n                console.log(ridesIdsFilter)\r\n                ridesIdsFilterSort = ridesIdsFilter.sort( (a,b) => {\r\n                    if(a.ridesIdValue > b.ridesIdValue){\r\n                        return 1;\r\n                    }if(a.ridesIdValue < b.ridesIdValue){\r\n                        return -1;\r\n                    }return 0;\r\n                })\r\n                /* NEAREST DATA */\r\n                let ridesFilter = ridesIdsFilterSort.map( el => el.rideData )\r\n                /* GET TIME NOW */\r\n                const timeNow = new Date();\r\n                let timeNow_ = timeNow.getTime();\r\n                /* UPCOMING */\r\n                let originalUpcoming = ridesFilter.filter( el => new Date(el.date).getTime() > timeNow_ );\r\n                /* PAST */\r\n                let originalPast = ridesFilter.filter( el => new Date(el.date).getTime() <  timeNow_ );\r\n                /* DISPATCH DATA TO ORIGINAL STORE */\r\n                if( dataCheck !== 0 ){\r\n                    dispatch( rideAdd( \r\n                        {rides_data:ridesFilter, \r\n                        upcomingCount:originalUpcoming.length, \r\n                        pastCount:originalPast.length} \r\n                    ) )\r\n                    dispatch( originalRidesAddNearest( {originalRidesNearest:ridesFilter}) )\r\n                    dispatch( originalRidesAddUpcoming( {originalRidesUpcoming:originalUpcoming} ) );\r\n                    dispatch( originalRidesAddPast( {originalRidesPast:originalPast} ) );\r\n                }\r\n            }\r\n\r\n    )\r\n    \r\n} \r\n\r\nexport default ApiRides;\r\n"]},"metadata":{},"sourceType":"module"}