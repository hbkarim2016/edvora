{"ast":null,"code":"import axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { rideAdd } from '../redux/reducers/RideSlice';\n\nconst ApiRides = (userState, dispatch, dataCheck) => {\n  axios.get('https://assessment.api.vweb.app/rides').then(res => {\n    let response = res.data;\n    let userStation = userState.station_code;\n    console.log(response);\n    console.log(userStation);\n    let ridesFilter = response.filter(el => el.station_path.includes(userStation));\n\n    if (dataCheck !== 0) {\n      return dispatch(rideAdd({\n        rides_data: ridesFilter\n      }));\n    }\n  });\n};\n\n_c = ApiRides;\nexport default ApiRides;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiRides\");","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/apis/ApiRides.jsx"],"names":["axios","useSelector","rideAdd","ApiRides","userState","dispatch","dataCheck","get","then","res","response","data","userStation","station_code","console","log","ridesFilter","filter","el","station_path","includes","rides_data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAaC,QAAb,EAAsBC,SAAtB,KAAoC;AAEjDN,EAAAA,KAAK,CAACO,GAAN,CAAU,uCAAV,EAAmDC,IAAnD,CAEIC,GAAG,IAAI;AACH,QAAIC,QAAQ,GAAGD,GAAG,CAACE,IAAnB;AACA,QAAIC,WAAW,GAAGR,SAAS,CAACS,YAA5B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,QAAII,WAAW,GAAGN,QAAQ,CAACO,MAAT,CAAiBC,EAAE,IAAKA,EAAE,CAACC,YAAH,CAAgBC,QAAhB,CAA0BR,WAA1B,CAAxB,CAAlB;;AACA,QAAIN,SAAS,KAAK,CAAlB,EAAqB;AACjB,aAAOD,QAAQ,CAAEH,OAAO,CAAE;AAACmB,QAAAA,UAAU,EAACL;AAAZ,OAAF,CAAT,CAAf;AACH;AACJ,GAXL;AAeH,CAjBD;;KAAMb,Q;AAmBN,eAAeA,QAAf","sourcesContent":["import axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\nimport { rideAdd } from '../redux/reducers/RideSlice';\r\n\r\nconst ApiRides = (userState , dispatch,dataCheck) => {\r\n\r\n    axios.get('https://assessment.api.vweb.app/rides').then(\r\n\r\n        res => {\r\n            let response = res.data;\r\n            let userStation = userState.station_code;\r\n            console.log(response)\r\n            console.log(userStation)\r\n            let ridesFilter = response.filter( el =>  el.station_path.includes( userStation ) );\r\n            if( dataCheck !== 0 ){\r\n                return dispatch( rideAdd( {rides_data:ridesFilter} ) )\r\n            }\r\n        }\r\n\r\n    )\r\n    \r\n} \r\n\r\nexport default ApiRides;\r\n"]},"metadata":{},"sourceType":"module"}