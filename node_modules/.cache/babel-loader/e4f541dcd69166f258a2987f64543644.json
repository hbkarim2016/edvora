{"ast":null,"code":"import _toConsumableArray from\"C:/My Computer/my work/apps/edvora/edvora/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import axios from'axios';import{originalRidesAddNearest,originalRidesAddPast,originalRidesAddUpcoming}from'../redux/reducers/OriginalRidesSlice';import{rideAdd}from'../redux/reducers/RideSlice';var ApiRides=function ApiRides(userState,dispatch,dataCheck){var ridesIds=[];var ridesIdsFilter=[];var ridesIdsFilterSort=[];axios.get('https://assessment.api.vweb.app/rides').then(function(res){var response=res.data;var userStation=userState.station_code;var ridesNear=response.map(function(el,indx){ridesIds[indx]=el.station_path.map(function(el_){var value=el_-userStation>0?el_-userStation:userStation-el_;return value;});var ridesIdValue=Math.min.apply(Math,_toConsumableArray(ridesIds[indx]));return{ridesIdValue:ridesIdValue,rideData:el};});console.log(userStation);ridesIdsFilter=Array.from(ridesNear.reduce(function(map,obj){return map.set(obj.ridesIdValue,obj);},new Map()).values());ridesIdsFilterSort=ridesIdsFilter.sort(function(a,b){if(a.ridesIdValue>b.ridesIdValue){return 1;}if(a.ridesIdValue<b.ridesIdValue){return-1;}return 0;});/* NEAREST DATA */var ridesFilter=ridesIdsFilterSort.map(function(el){return el.rideData;});var ridesFilterIdValue=ridesIdsFilterSort.map(function(el){return el.ridesIdValue;});/* GET TIME NOW */var timeNow=new Date();var timeNow_=timeNow.getTime();/* UPCOMING */var originalUpcoming=ridesFilter.filter(function(el){return new Date(el.date).getTime()>timeNow_;});/* PAST */var originalPast=ridesFilter.filter(function(el){return new Date(el.date).getTime()<timeNow_;});/* DISPATCH DATA TO ORIGINAL STORE */if(dataCheck!==0&&ridesFilter.length>0){try{dispatch(rideAdd({rides_data:ridesFilter,ridesUpcoming_data:originalUpcoming,ridesPast_data:originalPast,upcomingCount:originalUpcoming.length,pastCount:originalPast.length}));dispatch(originalRidesAddNearest({originalRidesNearest:ridesFilter,ridesFilterIdValue:ridesFilterIdValue}));dispatch(originalRidesAddUpcoming({originalRidesUpcoming:originalUpcoming}));dispatch(originalRidesAddPast({originalRidesPast:originalPast}));}catch(err){console.log(err);}}});};export default ApiRides;","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/apis/ApiRides.jsx"],"names":["axios","originalRidesAddNearest","originalRidesAddPast","originalRidesAddUpcoming","rideAdd","ApiRides","userState","dispatch","dataCheck","ridesIds","ridesIdsFilter","ridesIdsFilterSort","get","then","res","response","data","userStation","station_code","ridesNear","map","el","indx","station_path","el_","value","ridesIdValue","Math","min","rideData","console","log","Array","from","reduce","obj","set","Map","values","sort","a","b","ridesFilter","ridesFilterIdValue","timeNow","Date","timeNow_","getTime","originalUpcoming","filter","date","originalPast","length","rides_data","ridesUpcoming_data","ridesPast_data","upcomingCount","pastCount","originalRidesNearest","originalRidesUpcoming","originalRidesPast","err"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { originalRidesAddNearest, originalRidesAddPast, originalRidesAddUpcoming } from '../redux/reducers/OriginalRidesSlice';\r\nimport { rideAdd } from '../redux/reducers/RideSlice';\r\n\r\nconst ApiRides = (userState,dispatch,dataCheck) => {\r\n\r\n    let ridesIds = [];\r\n    let ridesIdsFilter = [];\r\n    let ridesIdsFilterSort = [];\r\n\r\n    axios.get('https://assessment.api.vweb.app/rides').then(\r\n\r\n        res => {\r\n                let response = res.data;\r\n                let userStation = userState.station_code;\r\n                let ridesNear = response.map( (el,indx) => {\r\n                    ridesIds[indx] = el.station_path.map( el_ => {\r\n                        let value = el_ - userStation > 0 ? el_ - userStation :  userStation - el_\r\n                        return value\r\n                    } )\r\n                    let ridesIdValue = Math.min(...ridesIds[indx]);\r\n                    return { ridesIdValue, rideData:el }\r\n                } )\r\n                console.log(userStation)\r\n                ridesIdsFilter = Array.from(ridesNear.reduce( (map, obj) => map.set(obj.ridesIdValue,obj) , new Map() ).values())\r\n                ridesIdsFilterSort = ridesIdsFilter.sort( (a,b) => {\r\n                    if(a.ridesIdValue > b.ridesIdValue){\r\n                        return 1;\r\n                    }if(a.ridesIdValue < b.ridesIdValue){\r\n                        return -1;\r\n                    }return 0;\r\n                })\r\n                /* NEAREST DATA */\r\n                let ridesFilter = ridesIdsFilterSort.map( el => el.rideData )\r\n                let ridesFilterIdValue = ridesIdsFilterSort.map( el => el.ridesIdValue )\r\n                /* GET TIME NOW */\r\n                const timeNow = new Date();\r\n                let timeNow_ = timeNow.getTime();\r\n                /* UPCOMING */\r\n                let originalUpcoming = ridesFilter.filter( el => new Date(el.date).getTime() > timeNow_ );\r\n                /* PAST */\r\n                let originalPast = ridesFilter.filter( el => new Date(el.date).getTime() <  timeNow_ );\r\n                /* DISPATCH DATA TO ORIGINAL STORE */\r\n                if( dataCheck !== 0 && ridesFilter.length > 0 ){\r\n                    try{\r\n                        dispatch( rideAdd( \r\n                            {   rides_data:ridesFilter,\r\n                                ridesUpcoming_data:originalUpcoming,\r\n                                ridesPast_data:originalPast, \r\n                                upcomingCount:originalUpcoming.length, \r\n                                pastCount:originalPast.length} \r\n                        ) )\r\n                        dispatch( originalRidesAddNearest( {originalRidesNearest:ridesFilter, ridesFilterIdValue:ridesFilterIdValue}) )\r\n                        dispatch( originalRidesAddUpcoming( {originalRidesUpcoming:originalUpcoming} ) );\r\n                        dispatch( originalRidesAddPast( {originalRidesPast:originalPast} ) );\r\n                    }catch(err){\r\n                        console.log(err)\r\n                    }\r\n                }\r\n            }\r\n\r\n    )\r\n    \r\n} \r\n\r\nexport default ApiRides;\r\n"]},"metadata":{},"sourceType":"module"}