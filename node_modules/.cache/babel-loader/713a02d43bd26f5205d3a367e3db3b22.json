{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { rideAdd, rideUpload } from \"../../redux/reducers/RideSlice\";\n\nconst NearestRides = (ridesDataState, dispatch) => {\n  _s();\n\n  const {\n    userState\n  } = useSelector(state => state.rideStore);\n  let userStationCode = userState.station_code;\n  let ridesNearest = [];\n  let rides_1 = ridesDataState.filter(el => {\n    return el.station_path.includes(userStationCode);\n  });\n\n  if (rides_1 !== undefined) {\n    ridesNearest[0] = rides_1[0];\n\n    if (!ridesNearest.includes(undefined)) {\n      //return dispatch( rideUpload( { rides_data:ridesNearest } ) )\n      console.log(ridesNearest);\n    }\n  }\n\n  ; //dispatch( rideAdd( { rides_data: ridesState } ) )\n};\n\n_s(NearestRides, \"jkfWfBeNQxEaVYRg7A+4sd+gsTk=\", false, function () {\n  return [useSelector];\n});\n\n_c = NearestRides;\nexport default NearestRides;\n\nvar _c;\n\n$RefreshReg$(_c, \"NearestRides\");","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/components/NearestRides/NearestRides.jsx"],"names":["useSelector","rideAdd","rideUpload","NearestRides","ridesDataState","dispatch","userState","state","rideStore","userStationCode","station_code","ridesNearest","rides_1","filter","el","station_path","includes","undefined","console","log"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,gCAApC;;AACA,MAAMC,YAAY,GAAG,CAACC,cAAD,EAAiBC,QAAjB,KAA8B;AAAA;;AAE/C,QAAM;AAAEC,IAAAA;AAAF,MAAgBN,WAAW,CAAEO,KAAK,IAAIA,KAAK,CAACC,SAAjB,CAAjC;AAEA,MAAIC,eAAe,GAAGH,SAAS,CAACI,YAAhC;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,OAAO,GAAGR,cAAc,CAACS,MAAf,CAAuBC,EAAE,IAAI;AACvC,WAAOA,EAAE,CAACC,YAAH,CAAgBC,QAAhB,CAA0BP,eAA1B,CAAP;AACH,GAFa,CAAd;;AAIA,MAAGG,OAAO,KAAKK,SAAf,EAA0B;AACtBN,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBC,OAAO,CAAC,CAAD,CAAzB;;AACA,QAAI,CAAED,YAAY,CAACK,QAAb,CAAsBC,SAAtB,CAAN,EAAyC;AACrC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAaR,YAAb;AACH;AACJ;;AAAA,GAhB8C,CAkB/C;AACH,CAnBD;;GAAMR,Y;UAEoBH,W;;;KAFpBG,Y;AAoBN,eAAeA,YAAf","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { rideAdd, rideUpload } from \"../../redux/reducers/RideSlice\";\r\nconst NearestRides = (ridesDataState, dispatch) => {\r\n    \r\n    const { userState } = useSelector( state => state.rideStore )\r\n\r\n    let userStationCode = userState.station_code;\r\n    let ridesNearest = [];\r\n    let rides_1 = ridesDataState.filter( el => {\r\n        return el.station_path.includes( userStationCode )\r\n    } );\r\n    \r\n    if(rides_1 !== undefined) {\r\n        ridesNearest[0] = rides_1[0]\r\n        if( !(ridesNearest.includes(undefined)) ){\r\n            //return dispatch( rideUpload( { rides_data:ridesNearest } ) )\r\n            console.log( ridesNearest )\r\n        }\r\n    };\r\n\r\n    //dispatch( rideAdd( { rides_data: ridesState } ) )\r\n}\r\nexport default NearestRides;"]},"metadata":{},"sourceType":"module"}