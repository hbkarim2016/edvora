{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst OriginalRidesSlice = createSlice({\n  name: 'OriginalRidesSlice',\n  initialState: {\n    originalRidesNearest: [],\n    originalRidesUpcoming: [],\n    originalRidesPast: [],\n    originalRide: 'nearest',\n    stateSelect: 'all',\n    citySelect: 'all'\n  },\n  reducers: {\n    originalRidesAddNearest: (state, action) => {\n      let ridesData = action.payload.originalRidesNearest;\n      state.originalRidesNearest = ridesData;\n      console.log('from Nearest original');\n    },\n    originalRidesAddUpcoming: (state, action) => {\n      let ridesData = action.payload.originalRidesUpcoming;\n      state.originalRidesUpcoming = ridesData;\n      console.log('from Upcoming original');\n    },\n    originalRidesAddPast: (state, action) => {\n      let ridesData = action.payload.originalRidesPast;\n      state.originalRidesPast = ridesData;\n      console.log('from Past original');\n    },\n    originalRidesStateOrCity: (state, action) => {\n      if (action.payload.filterField === 'state') {\n        state.stateSelect = action.payload.filterSelectValue;\n      }\n\n      if (action.payload.filterField === 'city') {\n        state.citySelect = action.payload.filterSelectValue;\n      }\n    },\n    originalRidesStateOrCity: (state, action) => {\n      if (action.payload.filterField === 'state') {\n        state.stateSelect = action.payload.filterSelectValue;\n      }\n\n      if (action.payload.filterField === 'city') {\n        state.citySelect = action.payload.filterSelectValue;\n      }\n    }\n  }\n});\nexport const {\n  originalRidesAddNearest,\n  originalRidesAddUpcoming,\n  originalRidesAddPast,\n  originalRidesStateOrCity\n} = OriginalRidesSlice.actions;\nexport default OriginalRidesSlice.reducer;","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/redux/reducers/OriginalRidesSlice.js"],"names":["createSlice","OriginalRidesSlice","name","initialState","originalRidesNearest","originalRidesUpcoming","originalRidesPast","originalRide","stateSelect","citySelect","reducers","originalRidesAddNearest","state","action","ridesData","payload","console","log","originalRidesAddUpcoming","originalRidesAddPast","originalRidesStateOrCity","filterField","filterSelectValue","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,kBAAkB,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAC,oBAD8B;AAEnCC,EAAAA,YAAY,EAAC;AACTC,IAAAA,oBAAoB,EAAC,EADZ;AAETC,IAAAA,qBAAqB,EAAC,EAFb;AAGTC,IAAAA,iBAAiB,EAAC,EAHT;AAITC,IAAAA,YAAY,EAAC,SAJJ;AAKTC,IAAAA,WAAW,EAAC,KALH;AAMTC,IAAAA,UAAU,EAAC;AANF,GAFsB;AAUnCC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,uBAAuB,EAAE,CAAEC,KAAF,EAASC,MAAT,KAAqB;AAC1C,UAAIC,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAeX,oBAA/B;AACAQ,MAAAA,KAAK,CAACR,oBAAN,GAA6BU,SAA7B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH,KALI;AAMLC,IAAAA,wBAAwB,EAAE,CAAEN,KAAF,EAASC,MAAT,KAAqB;AAC3C,UAAIC,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAeV,qBAA/B;AACAO,MAAAA,KAAK,CAACP,qBAAN,GAA8BS,SAA9B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,KAVI;AAWLE,IAAAA,oBAAoB,EAAE,CAAEP,KAAF,EAASC,MAAT,KAAqB;AACvC,UAAIC,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAeT,iBAA/B;AACAM,MAAAA,KAAK,CAACN,iBAAN,GAA0BQ,SAA1B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,KAfI;AAgBLG,IAAAA,wBAAwB,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACzC,UAAIA,MAAM,CAACE,OAAP,CAAeM,WAAf,KAA+B,OAAnC,EAA4C;AACxCT,QAAAA,KAAK,CAACJ,WAAN,GAAoBK,MAAM,CAACE,OAAP,CAAeO,iBAAnC;AACH;;AACD,UAAIT,MAAM,CAACE,OAAP,CAAeM,WAAf,KAA+B,MAAnC,EAA2C;AACvCT,QAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACE,OAAP,CAAeO,iBAAlC;AACH;AACJ,KAvBI;AAwBLF,IAAAA,wBAAwB,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACzC,UAAIA,MAAM,CAACE,OAAP,CAAeM,WAAf,KAA+B,OAAnC,EAA4C;AACxCT,QAAAA,KAAK,CAACJ,WAAN,GAAoBK,MAAM,CAACE,OAAP,CAAeO,iBAAnC;AACH;;AACD,UAAIT,MAAM,CAACE,OAAP,CAAeM,WAAf,KAA+B,MAAnC,EAA2C;AACvCT,QAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACE,OAAP,CAAeO,iBAAlC;AACH;AACJ;AA/BI;AAV0B,CAAD,CAAtC;AA6CA,OAAO,MAAM;AACTX,EAAAA,uBADS;AAETO,EAAAA,wBAFS;AAGTC,EAAAA,oBAHS;AAITC,EAAAA;AAJS,IAIoBnB,kBAAkB,CAACsB,OAJ7C;AAMP,eAAetB,kBAAkB,CAACuB,OAAlC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst OriginalRidesSlice = createSlice({\r\n    name:'OriginalRidesSlice',\r\n    initialState:{\r\n        originalRidesNearest:[],\r\n        originalRidesUpcoming:[],\r\n        originalRidesPast:[],\r\n        originalRide:'nearest',\r\n        stateSelect:'all',\r\n        citySelect:'all'\r\n    },\r\n    reducers:{\r\n        originalRidesAddNearest: ( state, action ) => {\r\n            let ridesData = action.payload.originalRidesNearest;\r\n            state.originalRidesNearest = ridesData;\r\n            console.log('from Nearest original')\r\n        },\r\n        originalRidesAddUpcoming: ( state, action ) => {\r\n            let ridesData = action.payload.originalRidesUpcoming;\r\n            state.originalRidesUpcoming = ridesData;\r\n            console.log('from Upcoming original')\r\n        },\r\n        originalRidesAddPast: ( state, action ) => {\r\n            let ridesData = action.payload.originalRidesPast;\r\n            state.originalRidesPast = ridesData;\r\n            console.log('from Past original')\r\n        },\r\n        originalRidesStateOrCity: (state, action) => {\r\n            if( action.payload.filterField === 'state' ){\r\n                state.stateSelect = action.payload.filterSelectValue;\r\n            }\r\n            if( action.payload.filterField === 'city' ){\r\n                state.citySelect = action.payload.filterSelectValue;\r\n            }\r\n        },\r\n        originalRidesStateOrCity: (state, action) => {\r\n            if( action.payload.filterField === 'state' ){\r\n                state.stateSelect = action.payload.filterSelectValue;\r\n            }\r\n            if( action.payload.filterField === 'city' ){\r\n                state.citySelect = action.payload.filterSelectValue;\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { \r\n    originalRidesAddNearest,\r\n    originalRidesAddUpcoming,\r\n    originalRidesAddPast, \r\n    originalRidesStateOrCity } = OriginalRidesSlice.actions;\r\n\r\nexport default OriginalRidesSlice.reducer;"]},"metadata":{},"sourceType":"module"}