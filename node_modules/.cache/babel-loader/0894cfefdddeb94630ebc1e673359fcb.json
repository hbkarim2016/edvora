{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst OriginalRidesSlice = createSlice({\n  name: 'OriginalRidesSlice',\n  initialState: {\n    originalRidesNearest: [],\n    originalRidesUpcoming: [],\n    originalRidesPast: [],\n    stateSelect: 'all',\n    citySelect: 'all'\n  },\n  reducers: {\n    originalRidesAddNearest: (state, action) => {\n      let ridesData = action.payload.originalRidesNearest;\n      state.originalRidesNearest = ridesData;\n      console.log('from Nearest original');\n    },\n    originalRidesAddUpcoming: (state, action) => {\n      let ridesData = action.payload.originalRidesUpcoming;\n      state.originalRidesUpcoming = ridesData;\n      console.log('from Upcoming original');\n    },\n    originalRidesAddPast: (state, action) => {\n      let ridesData = action.payload.originalRidesPast;\n      state.originalRidesPast = ridesData;\n      console.log('from Past original');\n    },\n    originalChangeStateAndCity: (state, action) => {\n      let stateAndCityValue = action.payload.stateAndCityValue;\n\n      if (stateAndCityValue === 'state') {\n        state.stateSelect = action.payload.stateAndCity;\n      } else if (stateAndCityValue === 'city') {\n        state.citySelect = action.payload.stateAndCity;\n      }\n    }\n  }\n});\nexport const {\n  originalRidesAddNearest,\n  originalRidesAddUpcoming,\n  originalRidesAddPast,\n  originalChangeStateAndCity\n} = OriginalRidesSlice.actions;\nexport default OriginalRidesSlice.reducer;","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/redux/reducers/OriginalRidesSlice.js"],"names":["createSlice","OriginalRidesSlice","name","initialState","originalRidesNearest","originalRidesUpcoming","originalRidesPast","stateSelect","citySelect","reducers","originalRidesAddNearest","state","action","ridesData","payload","console","log","originalRidesAddUpcoming","originalRidesAddPast","originalChangeStateAndCity","stateAndCityValue","stateAndCity","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,kBAAkB,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAC,oBAD8B;AAEnCC,EAAAA,YAAY,EAAC;AACTC,IAAAA,oBAAoB,EAAC,EADZ;AAETC,IAAAA,qBAAqB,EAAC,EAFb;AAGTC,IAAAA,iBAAiB,EAAC,EAHT;AAITC,IAAAA,WAAW,EAAC,KAJH;AAKTC,IAAAA,UAAU,EAAC;AALF,GAFsB;AASnCC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,uBAAuB,EAAE,CAAEC,KAAF,EAASC,MAAT,KAAqB;AAC1C,UAAIC,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAeV,oBAA/B;AACAO,MAAAA,KAAK,CAACP,oBAAN,GAA6BS,SAA7B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH,KALI;AAMLC,IAAAA,wBAAwB,EAAE,CAAEN,KAAF,EAASC,MAAT,KAAqB;AAC3C,UAAIC,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAeT,qBAA/B;AACAM,MAAAA,KAAK,CAACN,qBAAN,GAA8BQ,SAA9B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,KAVI;AAWLE,IAAAA,oBAAoB,EAAE,CAAEP,KAAF,EAASC,MAAT,KAAqB;AACvC,UAAIC,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAeR,iBAA/B;AACAK,MAAAA,KAAK,CAACL,iBAAN,GAA0BO,SAA1B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,KAfI;AAgBLG,IAAAA,0BAA0B,EAAE,CAAER,KAAF,EAASC,MAAT,KAAqB;AAC7C,UAAIQ,iBAAiB,GAAGR,MAAM,CAACE,OAAP,CAAeM,iBAAvC;;AACA,UAAIA,iBAAiB,KAAK,OAA1B,EAAmC;AAC/BT,QAAAA,KAAK,CAACJ,WAAN,GAAoBK,MAAM,CAACE,OAAP,CAAeO,YAAnC;AACH,OAFD,MAEM,IAAID,iBAAiB,KAAK,MAA1B,EAAkC;AACpCT,QAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACE,OAAP,CAAeO,YAAlC;AACH;AACJ;AAvBI;AAT0B,CAAD,CAAtC;AAoCA,OAAO,MAAM;AACTX,EAAAA,uBADS;AAETO,EAAAA,wBAFS;AAGTC,EAAAA,oBAHS;AAITC,EAAAA;AAJS,IAIsBlB,kBAAkB,CAACqB,OAJ/C;AAMP,eAAerB,kBAAkB,CAACsB,OAAlC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst OriginalRidesSlice = createSlice({\r\n    name:'OriginalRidesSlice',\r\n    initialState:{\r\n        originalRidesNearest:[],\r\n        originalRidesUpcoming:[],\r\n        originalRidesPast:[],\r\n        stateSelect:'all',\r\n        citySelect:'all'\r\n    },\r\n    reducers:{\r\n        originalRidesAddNearest: ( state, action ) => {\r\n            let ridesData = action.payload.originalRidesNearest;\r\n            state.originalRidesNearest = ridesData;\r\n            console.log('from Nearest original')\r\n        },\r\n        originalRidesAddUpcoming: ( state, action ) => {\r\n            let ridesData = action.payload.originalRidesUpcoming;\r\n            state.originalRidesUpcoming = ridesData;\r\n            console.log('from Upcoming original')\r\n        },\r\n        originalRidesAddPast: ( state, action ) => {\r\n            let ridesData = action.payload.originalRidesPast;\r\n            state.originalRidesPast = ridesData;\r\n            console.log('from Past original')\r\n        },\r\n        originalChangeStateAndCity: ( state, action ) => {\r\n            let stateAndCityValue = action.payload.stateAndCityValue;\r\n            if( stateAndCityValue === 'state' ){\r\n                state.stateSelect = action.payload.stateAndCity;\r\n            }else if( stateAndCityValue === 'city' ){\r\n                state.citySelect = action.payload.stateAndCity;\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { \r\n    originalRidesAddNearest,\r\n    originalRidesAddUpcoming,\r\n    originalRidesAddPast,\r\n    originalChangeStateAndCity } = OriginalRidesSlice.actions;\r\n\r\nexport default OriginalRidesSlice.reducer;"]},"metadata":{},"sourceType":"module"}