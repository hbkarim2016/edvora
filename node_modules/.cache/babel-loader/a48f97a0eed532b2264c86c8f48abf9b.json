{"ast":null,"code":"import axios from 'axios';\nimport { rideAdd } from '../redux/reducers/RideSlice';\n\nconst ApiRides = (userState, dispatch, dataCheck) => {\n  let NearestData = [];\n  let ridesIds = [];\n  axios.get('https://assessment.api.vweb.app/rides').then(res => {\n    let response = res.data;\n    let userStation = userState.station_code;\n    let ridesFilter = response.filter(el => el.station_path.includes(userStation));\n    NearestData[0] = ridesFilter[0];\n    let ridesNear = response.map(el => {\n      let rideStation = el.station_path.map(el_ => {\n        if (el_ - userStation === 1) {\n          console.log(userStation);\n          console.log(el);\n        }\n      });\n    });\n    /*\r\n    if( dataCheck !== 0 ){\r\n        return dispatch( rideAdd( {rides_data:NearestData} ) )\r\n    }\r\n    */\n  });\n};\n\n_c = ApiRides;\nexport default ApiRides;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiRides\");","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/apis/ApiRides.jsx"],"names":["axios","rideAdd","ApiRides","userState","dispatch","dataCheck","NearestData","ridesIds","get","then","res","response","data","userStation","station_code","ridesFilter","filter","el","station_path","includes","ridesNear","map","rideStation","el_","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAWC,QAAX,EAAoBC,SAApB,KAAkC;AAE/C,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,QAAQ,GAAG,EAAf;AAEAP,EAAAA,KAAK,CAACQ,GAAN,CAAU,uCAAV,EAAmDC,IAAnD,CAEIC,GAAG,IAAI;AACC,QAAIC,QAAQ,GAAGD,GAAG,CAACE,IAAnB;AACA,QAAIC,WAAW,GAAGV,SAAS,CAACW,YAA5B;AACA,QAAIC,WAAW,GAAGJ,QAAQ,CAACK,MAAT,CAAiBC,EAAE,IAAKA,EAAE,CAACC,YAAH,CAAgBC,QAAhB,CAA0BN,WAA1B,CAAxB,CAAlB;AACAP,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBS,WAAW,CAAC,CAAD,CAA5B;AACA,QAAIK,SAAS,GAAGT,QAAQ,CAACU,GAAT,CAAcJ,EAAE,IAAI;AAChC,UAAIK,WAAW,GAAGL,EAAE,CAACC,YAAH,CAAgBG,GAAhB,CAAqBE,GAAG,IAAI;AAC1C,YAAIA,GAAG,GAAGV,WAAP,KAAwB,CAA3B,EAA8B;AAC1BW,UAAAA,OAAO,CAACC,GAAR,CAAYZ,WAAZ;AACAW,UAAAA,OAAO,CAACC,GAAR,CAAYR,EAAZ;AACH;AACJ,OALiB,CAAlB;AAMH,KAPe,CAAhB;AAQA;AAChB;AACA;AACA;AACA;AACa,GApBT;AAwBH,CA7BD;;KAAMf,Q;AA+BN,eAAeA,QAAf","sourcesContent":["import axios from 'axios';\r\nimport { rideAdd } from '../redux/reducers/RideSlice';\r\n\r\nconst ApiRides = (userState,dispatch,dataCheck) => {\r\n\r\n    let NearestData = [];\r\n    let ridesIds = [];\r\n\r\n    axios.get('https://assessment.api.vweb.app/rides').then(\r\n\r\n        res => {\r\n                let response = res.data;\r\n                let userStation = userState.station_code;\r\n                let ridesFilter = response.filter( el =>  el.station_path.includes( userStation ) );\r\n                NearestData[0] = ridesFilter[0];\r\n                let ridesNear = response.map( el => {\r\n                    let rideStation = el.station_path.map( el_ => {\r\n                        if((el_ - userStation) === 1 ){\r\n                            console.log(userStation)\r\n                            console.log(el)\r\n                        }\r\n                    } )\r\n                } )\r\n                /*\r\n                if( dataCheck !== 0 ){\r\n                    return dispatch( rideAdd( {rides_data:NearestData} ) )\r\n                }\r\n                */\r\n            }\r\n\r\n    )\r\n    \r\n} \r\n\r\nexport default ApiRides;\r\n"]},"metadata":{},"sourceType":"module"}