{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst RideSlice = createSlice({\n  name: 'RideSlice',\n  initialState: {\n    ridesState: [],\n    userState: []\n  },\n  reducers: {\n    rideAdd: (state, action) => {\n      let ridesData = action.payload.rides_data;\n      state.ridesState = ridesData;\n    },\n    userAdd: (state, action) => {\n      let userData = action.payload.user_data;\n      state.userState = userData;\n    },\n    handleRides_Nearest: (state, action) => {\n      let userStation = action.payload.userState.station_code;\n      let ridesData = action.payload.ridesState;\n      let ridesNearest = [];\n      ridesData.map((el, indx) => {\n        if (el.station_path.includes(userStation)) {\n          console.log(indx);\n          return ridesNearest.push(el);\n        }\n      });\n      state.ridesState = ridesNearest;\n    }\n  }\n});\nexport const {\n  rideAdd,\n  userAdd,\n  handleRides_Nearest\n} = RideSlice.actions;\nexport default RideSlice.reducer;","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/redux/reducers/RideSlice.js"],"names":["createSlice","RideSlice","name","initialState","ridesState","userState","reducers","rideAdd","state","action","ridesData","payload","rides_data","userAdd","userData","user_data","handleRides_Nearest","userStation","station_code","ridesNearest","map","el","indx","station_path","includes","console","log","push","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC1BE,EAAAA,IAAI,EAAC,WADqB;AAE1BC,EAAAA,YAAY,EAAC;AACTC,IAAAA,UAAU,EAAC,EADF;AAETC,IAAAA,SAAS,EAAC;AAFD,GAFa;AAM1BC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,OAAO,EAAE,CAAEC,KAAF,EAASC,MAAT,KAAqB;AAC1B,UAAIC,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAeC,UAA/B;AACAJ,MAAAA,KAAK,CAACJ,UAAN,GAAmBM,SAAnB;AACH,KAJI;AAKLG,IAAAA,OAAO,EAAE,CAAEL,KAAF,EAASC,MAAT,KAAqB;AAC1B,UAAIK,QAAQ,GAAGL,MAAM,CAACE,OAAP,CAAeI,SAA9B;AACAP,MAAAA,KAAK,CAACH,SAAN,GAAkBS,QAAlB;AACH,KARI;AASLE,IAAAA,mBAAmB,EAAE,CAAER,KAAF,EAASC,MAAT,KAAoB;AACrC,UAAIQ,WAAW,GAAGR,MAAM,CAACE,OAAP,CAAeN,SAAf,CAAyBa,YAA3C;AACA,UAAIR,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAeP,UAA/B;AACA,UAAIe,YAAY,GAAG,EAAnB;AACAT,MAAAA,SAAS,CAACU,GAAV,CAAe,CAACC,EAAD,EAAKC,IAAL,KAAc;AACzB,YAAID,EAAE,CAACE,YAAH,CAAgBC,QAAhB,CAA0BP,WAA1B,CAAJ,EAA6C;AACzCQ,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,iBAAOH,YAAY,CAACQ,IAAb,CAAkBN,EAAlB,CAAP;AACH;AACJ,OALD;AAMAb,MAAAA,KAAK,CAACJ,UAAN,GAAmBe,YAAnB;AACH;AApBI;AANiB,CAAD,CAA7B;AA+BA,OAAO,MAAM;AAAEZ,EAAAA,OAAF;AAAWM,EAAAA,OAAX;AAAoBG,EAAAA;AAApB,IAA4Cf,SAAS,CAAC2B,OAA5D;AACP,eAAe3B,SAAS,CAAC4B,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst RideSlice = createSlice({\r\n    name:'RideSlice',\r\n    initialState:{\r\n        ridesState:[],\r\n        userState:[]\r\n    },\r\n    reducers:{\r\n        rideAdd: ( state, action ) => {\r\n            let ridesData = action.payload.rides_data;\r\n            state.ridesState = ridesData;\r\n        },\r\n        userAdd: ( state, action ) => {\r\n            let userData = action.payload.user_data;\r\n            state.userState = userData;\r\n        },\r\n        handleRides_Nearest: ( state, action ) =>{\r\n            let userStation = action.payload.userState.station_code;\r\n            let ridesData = action.payload.ridesState;\r\n            let ridesNearest = [];\r\n            ridesData.map( (el, indx) => {\r\n                if( el.station_path.includes( userStation ) ){\r\n                    console.log(indx)\r\n                    return ridesNearest.push(el)\r\n                }\r\n            } );\r\n            state.ridesState = ridesNearest;\r\n        }\r\n\r\n    }\r\n})\r\n\r\nexport const { rideAdd, userAdd, handleRides_Nearest } = RideSlice.actions;\r\nexport default RideSlice.reducer;"]},"metadata":{},"sourceType":"module"}