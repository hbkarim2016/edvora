{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst NearestRides = () => {\n  _s();\n\n  const {\n    ridesState,\n    userState\n  } = useSelector(state => state.rideStore);\n  const dispatch = useDispatch();\n  let userStationCode = userState.station_code;\n  let ridesNearest = [];\n  let rides_1 = ridesState.filter(el => {\n    return el.station_path.includes(userStationCode);\n  });\n\n  if (rides_1 !== undefined) {\n    ridesNearest[0] = rides_1[0];\n  }\n\n  ;\n  ridesNearest !== undefined && console.log(ridesNearest);\n};\n\n_s(NearestRides, \"jInJ86PbAnIzbqW4VoPt7OEAVNo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = NearestRides;\nexport default NearestRides;\n\nvar _c;\n\n$RefreshReg$(_c, \"NearestRides\");","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/components/NearestRides/NearestRides.jsx"],"names":["useDispatch","useSelector","NearestRides","ridesState","userState","state","rideStore","dispatch","userStationCode","station_code","ridesNearest","rides_1","filter","el","station_path","includes","undefined","console","log"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAEvB,QAAM;AAAEC,IAAAA,UAAF;AAAaC,IAAAA;AAAb,MAA2BH,WAAW,CAAEI,KAAK,IAAIA,KAAK,CAACC,SAAjB,CAA5C;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEA,MAAIQ,eAAe,GAAGJ,SAAS,CAACK,YAAhC;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,OAAO,GAAGR,UAAU,CAACS,MAAX,CAAmBC,EAAE,IAAI;AACnC,WAAOA,EAAE,CAACC,YAAH,CAAgBC,QAAhB,CAA0BP,eAA1B,CAAP;AACH,GAFa,CAAd;;AAIA,MAAGG,OAAO,KAAKK,SAAf,EAA0B;AACtBN,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBC,OAAO,CAAC,CAAD,CAAzB;AACH;;AAAA;AACDD,EAAAA,YAAY,KAAKM,SAAjB,IAA8BC,OAAO,CAACC,GAAR,CAAaR,YAAb,CAA9B;AAEH,CAhBD;;GAAMR,Y;UAE+BD,W,EAChBD,W;;;KAHfE,Y;AAiBN,eAAeA,YAAf","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst NearestRides = () => {\r\n    \r\n    const { ridesState,userState } = useSelector( state => state.rideStore );\r\n    const dispatch = useDispatch();\r\n\r\n    let userStationCode = userState.station_code;\r\n    let ridesNearest = [];\r\n    let rides_1 = ridesState.filter( el => {\r\n        return el.station_path.includes( userStationCode )\r\n    } );\r\n    \r\n    if(rides_1 !== undefined) {\r\n        ridesNearest[0] = rides_1[0]\r\n    };\r\n    ridesNearest !== undefined && console.log( ridesNearest )\r\n\r\n}\r\nexport default NearestRides;"]},"metadata":{},"sourceType":"module"}