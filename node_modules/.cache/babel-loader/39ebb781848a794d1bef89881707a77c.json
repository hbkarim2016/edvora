{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";var OriginalRidesSlice=createSlice({name:'OriginalRidesSlice',initialState:{originalRidesNearest:[],originalRidesUpcoming:[],originalRidesPast:[],stateSelect:'all',citySelect:'all'},reducers:{originalRidesAddNearest:function originalRidesAddNearest(state,action){var ridesData=action.payload.originalRidesNearest;state.originalRidesNearest=ridesData;console.log('from Nearest original');},originalRidesAddUpcoming:function originalRidesAddUpcoming(state,action){var ridesData=action.payload.originalRidesUpcoming;state.originalRidesUpcoming=ridesData;console.log('from Upcoming original');},originalRidesAddPast:function originalRidesAddPast(state,action){var ridesData=action.payload.originalRidesPast;state.originalRidesPast=ridesData;console.log('from Past original');},originalChangeStateAndCity:function originalChangeStateAndCity(state,action){var stateAndCityValue=action.payload.stateAndCityValue;if(stateAndCityValue==='state'){state.stateSelect=action.payload.stateAndCity;}else if(stateAndCityValue==='city'){state.citySelect=action.payload.stateAndCity;}}}});var _OriginalRidesSlice$a=OriginalRidesSlice.actions,originalRidesAddNearest=_OriginalRidesSlice$a.originalRidesAddNearest,originalRidesAddUpcoming=_OriginalRidesSlice$a.originalRidesAddUpcoming,originalRidesAddPast=_OriginalRidesSlice$a.originalRidesAddPast,originalChangeStateAndCity=_OriginalRidesSlice$a.originalChangeStateAndCity;export{originalRidesAddNearest,originalRidesAddUpcoming,originalRidesAddPast,originalChangeStateAndCity};export default OriginalRidesSlice.reducer;","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/redux/reducers/OriginalRidesSlice.js"],"names":["createSlice","OriginalRidesSlice","name","initialState","originalRidesNearest","originalRidesUpcoming","originalRidesPast","stateSelect","citySelect","reducers","originalRidesAddNearest","state","action","ridesData","payload","console","log","originalRidesAddUpcoming","originalRidesAddPast","originalChangeStateAndCity","stateAndCityValue","stateAndCity","actions","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,GAAMC,CAAAA,kBAAkB,CAAGD,WAAW,CAAC,CACnCE,IAAI,CAAC,oBAD8B,CAEnCC,YAAY,CAAC,CACTC,oBAAoB,CAAC,EADZ,CAETC,qBAAqB,CAAC,EAFb,CAGTC,iBAAiB,CAAC,EAHT,CAITC,WAAW,CAAC,KAJH,CAKTC,UAAU,CAAC,KALF,CAFsB,CASnCC,QAAQ,CAAC,CACLC,uBAAuB,CAAE,iCAAEC,KAAF,CAASC,MAAT,CAAqB,CAC1C,GAAIC,CAAAA,SAAS,CAAGD,MAAM,CAACE,OAAP,CAAeV,oBAA/B,CACAO,KAAK,CAACP,oBAAN,CAA6BS,SAA7B,CACAE,OAAO,CAACC,GAAR,CAAY,uBAAZ,EACH,CALI,CAMLC,wBAAwB,CAAE,kCAAEN,KAAF,CAASC,MAAT,CAAqB,CAC3C,GAAIC,CAAAA,SAAS,CAAGD,MAAM,CAACE,OAAP,CAAeT,qBAA/B,CACAM,KAAK,CAACN,qBAAN,CAA8BQ,SAA9B,CACAE,OAAO,CAACC,GAAR,CAAY,wBAAZ,EACH,CAVI,CAWLE,oBAAoB,CAAE,8BAAEP,KAAF,CAASC,MAAT,CAAqB,CACvC,GAAIC,CAAAA,SAAS,CAAGD,MAAM,CAACE,OAAP,CAAeR,iBAA/B,CACAK,KAAK,CAACL,iBAAN,CAA0BO,SAA1B,CACAE,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACH,CAfI,CAgBLG,0BAA0B,CAAE,oCAAER,KAAF,CAASC,MAAT,CAAqB,CAC7C,GAAIQ,CAAAA,iBAAiB,CAAGR,MAAM,CAACE,OAAP,CAAeM,iBAAvC,CACA,GAAIA,iBAAiB,GAAK,OAA1B,CAAmC,CAC/BT,KAAK,CAACJ,WAAN,CAAoBK,MAAM,CAACE,OAAP,CAAeO,YAAnC,CACH,CAFD,IAEM,IAAID,iBAAiB,GAAK,MAA1B,CAAkC,CACpCT,KAAK,CAACH,UAAN,CAAmBI,MAAM,CAACE,OAAP,CAAeO,YAAlC,CACH,CACJ,CAvBI,CAT0B,CAAD,CAAtC,CAoCO,0BAI4BpB,kBAAkB,CAACqB,OAJ/C,CACHZ,uBADG,uBACHA,uBADG,CAEHO,wBAFG,uBAEHA,wBAFG,CAGHC,oBAHG,uBAGHA,oBAHG,CAIHC,0BAJG,uBAIHA,0BAJG,C,yGAMP,cAAelB,CAAAA,kBAAkB,CAACsB,OAAlC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst OriginalRidesSlice = createSlice({\r\n    name:'OriginalRidesSlice',\r\n    initialState:{\r\n        originalRidesNearest:[],\r\n        originalRidesUpcoming:[],\r\n        originalRidesPast:[],\r\n        stateSelect:'all',\r\n        citySelect:'all'\r\n    },\r\n    reducers:{\r\n        originalRidesAddNearest: ( state, action ) => {\r\n            let ridesData = action.payload.originalRidesNearest;\r\n            state.originalRidesNearest = ridesData;\r\n            console.log('from Nearest original')\r\n        },\r\n        originalRidesAddUpcoming: ( state, action ) => {\r\n            let ridesData = action.payload.originalRidesUpcoming;\r\n            state.originalRidesUpcoming = ridesData;\r\n            console.log('from Upcoming original')\r\n        },\r\n        originalRidesAddPast: ( state, action ) => {\r\n            let ridesData = action.payload.originalRidesPast;\r\n            state.originalRidesPast = ridesData;\r\n            console.log('from Past original')\r\n        },\r\n        originalChangeStateAndCity: ( state, action ) => {\r\n            let stateAndCityValue = action.payload.stateAndCityValue;\r\n            if( stateAndCityValue === 'state' ){\r\n                state.stateSelect = action.payload.stateAndCity;\r\n            }else if( stateAndCityValue === 'city' ){\r\n                state.citySelect = action.payload.stateAndCity;\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { \r\n    originalRidesAddNearest,\r\n    originalRidesAddUpcoming,\r\n    originalRidesAddPast,\r\n    originalChangeStateAndCity } = OriginalRidesSlice.actions;\r\n\r\nexport default OriginalRidesSlice.reducer;"]},"metadata":{},"sourceType":"module"}