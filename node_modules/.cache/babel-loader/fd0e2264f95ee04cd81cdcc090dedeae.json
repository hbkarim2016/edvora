{"ast":null,"code":"import axios from 'axios';\nimport { rideAdd } from '../redux/reducers/RideSlice';\n\nconst ApiRides = (userState, dispatch, dataCheck) => {\n  let NearestData = [];\n  axios.get('https://assessment.api.vweb.app/rides').then(res => {\n    let response = res.data;\n    let userStation = userState.station_code;\n    let ridesFilter = response.filter(el => el.station_path.includes(userStation));\n    NearestData[0] = ridesFilter[0];\n    /*\r\n    if( dataCheck !== 0 ){\r\n        return dispatch( rideAdd( {rides_data:NearestData} ) )\r\n    }\r\n    */\n  });\n};\n\n_c = ApiRides;\nexport default ApiRides;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiRides\");","map":{"version":3,"sources":["C:/My Computer/my work/apps/edvora/edvora/src/content/apis/ApiRides.jsx"],"names":["axios","rideAdd","ApiRides","userState","dispatch","dataCheck","NearestData","get","then","res","response","data","userStation","station_code","ridesFilter","filter","el","station_path","includes"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAWC,QAAX,EAAoBC,SAApB,KAAkC;AAE/C,MAAIC,WAAW,GAAG,EAAlB;AAEAN,EAAAA,KAAK,CAACO,GAAN,CAAU,uCAAV,EAAmDC,IAAnD,CAEIC,GAAG,IAAI;AACH,QAAIC,QAAQ,GAAGD,GAAG,CAACE,IAAnB;AACA,QAAIC,WAAW,GAAGT,SAAS,CAACU,YAA5B;AACA,QAAIC,WAAW,GAAGJ,QAAQ,CAACK,MAAT,CAAiBC,EAAE,IAAKA,EAAE,CAACC,YAAH,CAAgBC,QAAhB,CAA0BN,WAA1B,CAAxB,CAAlB;AACAN,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBQ,WAAW,CAAC,CAAD,CAA5B;AACA;AACZ;AACA;AACA;AACA;AACS,GAZL;AAgBH,CApBD;;KAAMZ,Q;AAsBN,eAAeA,QAAf","sourcesContent":["import axios from 'axios';\r\nimport { rideAdd } from '../redux/reducers/RideSlice';\r\n\r\nconst ApiRides = (userState,dispatch,dataCheck) => {\r\n\r\n    let NearestData = [];\r\n\r\n    axios.get('https://assessment.api.vweb.app/rides').then(\r\n\r\n        res => {\r\n            let response = res.data;\r\n            let userStation = userState.station_code;\r\n            let ridesFilter = response.filter( el =>  el.station_path.includes( userStation ) );\r\n            NearestData[0] = ridesFilter[0];\r\n            /*\r\n            if( dataCheck !== 0 ){\r\n                return dispatch( rideAdd( {rides_data:NearestData} ) )\r\n            }\r\n            */\r\n        }\r\n\r\n    )\r\n    \r\n} \r\n\r\nexport default ApiRides;\r\n"]},"metadata":{},"sourceType":"module"}